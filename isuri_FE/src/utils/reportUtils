import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';
import XLSX from 'xlsx';

interface MaintenanceRecord {
    vin: string;
    make: string;
    model: string;
    year: number;
    mileage: number;
    serviceDate: string;
    nextServiceDate: string;
    licensePlate: string;
    maintenanceStatus: boolean;
    ownersEmail: string;
}

export const exportToPDF = (data: MaintenanceRecord[]) => {
    const doc = new jsPDF();
    doc.text('Maintenance Records', 10, 10);
    let y = 20;
    data.forEach((record) => {
        const stringValue = `VIN: ${record.vin}, Year: ${record.year}`;
        doc.text(stringValue, 10, y);
        y += 10;
    });
    // Save the PDF file using saveAs from file-saver library
    doc.save('maintenance_records.pdf');
};

export const exportToExcel = (data: MaintenanceRecord[]) => {
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Maintenance Records');
    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
    const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });
    // Save the Excel file using saveAs from file-saver library
    saveAs(blob, 'maintenance_records.xlsx');
};

const s2ab = (s: string): ArrayBuffer => {
    const buf = new ArrayBuffer(s.length);
    const view = new Uint8Array(buf);
    for (let i = 0; i < s.length; i++) {
        view[i] = s.charCodeAt(i) & 0xff;
    }
    return buf;
};
